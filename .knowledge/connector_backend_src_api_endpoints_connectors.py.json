{"is_source_file": true, "format": "Python", "description": "This file defines a set of FastAPI endpoints for managing 'connectors' in a multi-tenant system, including listing, creating, retrieving, updating, deleting connectors, OAuth flow handling, and resource searching. It interacts with a database, external connector registry, and handles OAuth authorization flows and token management.", "external_files": ["src.models.schemas", "src.core.database", "src.core.security", "src.core.exceptions", "src.connectors.registry", "src.connectors.base", "loguru"], "external_methods": ["get_current_user", "create_state_token", "verify_state_token", "encryption_manager.encrypt", "encryption_manager.decrypt"], "published": ["list_available_connectors", "list_tenant_connectors", "create_connector", "get_connector", "update_connector", "delete_connector", "oauth_login", "oauth_callback", "search_resources"], "classes": [], "methods": [{"name": "list_available_connectors()", "description": "Endpoint to list all available connectors registered in the connector registry.", "scope": "", "scopeKind": ""}, {"name": "list_tenant_connectors( current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Endpoint to list connectors configured for the current tenant, excluding sensitive credentials.", "scope": "", "scopeKind": ""}, {"name": "create_connector( connector_data: ConnectorCreate, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Endpoint to create a new connector for the tenant after validation.", "scope": "", "scopeKind": ""}, {"name": "get_connector( connector_id: str, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Retrieve details of a specific connector by ID for the current tenant.", "scope": "", "scopeKind": ""}, {"name": "update_connector( connector_id: str, update_data: ConnectorUpdate, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Update configuration of an existing connector.", "scope": "", "scopeKind": ""}, {"name": "delete_connector( connector_id: str, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Delete a connector and handle cleanup such as revoking credentials.", "scope": "", "scopeKind": ""}, {"name": "oauth_login( connector_id: str, request: Request, login_request: OAuthLoginRequest = None, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Initiate OAuth authorization flow for a connector, generating authorization URL and state.", "scope": "", "scopeKind": ""}, {"name": "oauth_callback( connector_id: str, request: Request, code: str = Query(...), state: str = Query(...), error: Optional[str] = Query(None), error_description: Optional[str] = Query(None), db = Depends(get_database) )", "description": "Handle OAuth callback, exchange code for tokens, and update connector credentials.", "scope": "", "scopeKind": ""}, {"name": "search_resources( connector_id: str, q: str = Query(..., description=\"Search query\"), resource_type: Optional[str] = Query(None, description=\"Resource type to search\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(20, ge=1, le=100, description=\"Results per page\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Perform a search query on a connected service using stored credentials.", "scope": "", "scopeKind": ""}, {"name": "_refresh_connector_token(db, tenant_id: str, connector_id: str, connector: BaseConnector)", "description": "Internal helper to refresh OAuth tokens when expired.", "scope": "", "scopeKind": ""}], "calls": ["connector_registry.list_connectors", "connector_registry.is_registered", "connector_registry.create_connector", "db.connectors.find", "db.connectors.find_one", "db.connectors.insert_one", "db.connectors.update_one", "db.connectors.delete_one", "create_state_token", "verify_state_token", "encryption_manager.encrypt", "encryption_manager.decrypt", "connector.exchange_code_for_tokens", "connector.search", "connector.refresh_access_token", "logger.error"], "search-terms": ["connectors API", "OAuth flow", "tenant-specific connectors", "connector registry", "resource search", "connector create/update/delete", "OAuth callback handling", "encryption of credentials"], "state": 2, "file_id": 16, "knowledge_revision": 44, "git_revision": "", "revision_history": [{"37": ""}, {"44": ""}], "ctags": [{"_type": "tag", "name": "_refresh_connector_token", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def _refresh_connector_token(db, tenant_id: str, connector_id: str, connector: BaseConnect/", "language": "Python", "kind": "function", "signature": "(db, tenant_id: str, connector_id: str, connector: BaseConnector)"}, {"_type": "tag", "name": "create_connector", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def create_connector($/", "language": "Python", "kind": "function", "signature": "( connector_data: ConnectorCreate, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "delete_connector", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def delete_connector($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "get_connector", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def get_connector($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "list_available_connectors", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def list_available_connectors():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "list_tenant_connectors", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def list_tenant_connectors($/", "language": "Python", "kind": "function", "signature": "( current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "oauth_callback", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def oauth_callback($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, request: Request, code: str = Query(...), state: str = Query(...), error: Optional[str] = Query(None), error_description: Optional[str] = Query(None), db = Depends(get_database) )"}, {"_type": "tag", "name": "oauth_login", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def oauth_login($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, request: Request, login_request: OAuthLoginRequest = None, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "search_resources", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def search_resources($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, q: str = Query(..., description=\"Search query\"), resource_type: Optional[str] = Query(None, description=\"Resource type to search\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(20, ge=1, le=100, description=\"Results per page\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "update_connector", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/connectors.py", "pattern": "/^async def update_connector($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, update_data: ConnectorUpdate, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}], "hash": "b1f6c7e1107e31300d7ccd53235f2606", "format-version": 4, "code-base-name": "connector_backend", "filename": "connector_backend/src/api/endpoints/connectors.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}