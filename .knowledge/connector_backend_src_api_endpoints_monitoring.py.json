{"is_source_file": true, "format": "Python", "description": "This is a FastAPI module defining multiple API endpoints related to system monitoring, metrics collection, connector analytics, and performance monitoring within a backend service. It includes route handlers for health checks, retrieving and posting metrics, and generating analytics reports based on data stored in a database.", "external_files": ["src.models.schemas", "src.core.database", "src.core.security", "src.connectors.registry", "loguru"], "external_methods": ["get_database", "get_current_user"], "published": ["router"], "classes": [{"name": "HealthStatus", "description": "Schema representing the health status of the system, including overall status, timestamp, and individual health checks."}, {"name": "MetricData", "description": "Schema representing a single data point for a metric, including timestamp, value, and labels."}, {"name": "StatusResponse", "description": "Schema used as a response to confirm success or failure of certain operations like recording metrics."}], "methods": [{"name": "get_system_health(db = Depends(get_database))", "description": "Endpoint to perform comprehensive system health checks, including database, connectors, and memory usage.", "scope": "", "scopeKind": ""}, {"name": "get_metrics( metric_name: Optional[str] = Query(None, description=\"Filter by metric name\"), hours: int = Query(24, ge=1, le=168, description=\"Hours of data to retrieve\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Endpoint to retrieve metric data within a specified time range and filter by metric name.", "scope": "", "scopeKind": ""}, {"name": "record_metric( metric_name: str, metric_type: str, value: float, labels: Optional[Dict[str, str]] = None, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Endpoint to record a new data point for a specific metric.", "scope": "", "scopeKind": ""}, {"name": "get_connector_analytics( days: int = Query(30, ge=1, le=365, description=\"Days of data to analyze\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Endpoint to obtain analytics related to connector usage, status, workflows, and errors over a given period.", "scope": "", "scopeKind": ""}, {"name": "get_performance_analytics( hours: int = Query(24, ge=1, le=168, description=\"Hours of data to analyze\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )", "description": "Endpoint to retrieve system performance metrics such as API response times and error rates over the last specified hours.", "scope": "", "scopeKind": ""}], "calls": ["db.command", "connector_registry.list_connectors", "psutil.virtual_memory", "db.metrics.find", "db.metrics.update_one", "db.connectors.aggregate", "db.workflows.aggregate"], "search-terms": ["monitoring", "health endpoint", "metrics collection", "analytics", "connector registry", "performance metrics", "FastAPI endpoints", "system health check", "metrics API"], "state": 2, "file_id": 20, "knowledge_revision": 55, "git_revision": "", "revision_history": [{"50": ""}, {"55": ""}], "ctags": [{"_type": "tag", "name": "get_connector_analytics", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/monitoring.py", "pattern": "/^async def get_connector_analytics($/", "language": "Python", "kind": "function", "signature": "( days: int = Query(30, ge=1, le=365, description=\"Days of data to analyze\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "get_metrics", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/monitoring.py", "pattern": "/^async def get_metrics($/", "language": "Python", "kind": "function", "signature": "( metric_name: Optional[str] = Query(None, description=\"Filter by metric name\"), hours: int = Query(24, ge=1, le=168, description=\"Hours of data to retrieve\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "get_performance_analytics", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/monitoring.py", "pattern": "/^async def get_performance_analytics($/", "language": "Python", "kind": "function", "signature": "( hours: int = Query(24, ge=1, le=168, description=\"Hours of data to analyze\"), current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "get_system_health", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/monitoring.py", "pattern": "/^async def get_system_health(db = Depends(get_database)):$/", "language": "Python", "kind": "function", "signature": "(db = Depends(get_database))"}, {"_type": "tag", "name": "record_metric", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/monitoring.py", "pattern": "/^async def record_metric($/", "language": "Python", "kind": "function", "signature": "( metric_name: str, metric_type: str, value: float, labels: Optional[Dict[str, str]] = None, current_user: Dict[str, Any] = Depends(get_current_user), db = Depends(get_database) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/monitoring.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}], "hash": "cea87e2c390ae82ae1d85128fb61b059", "format-version": 4, "code-base-name": "connector_backend", "filename": "connector_backend/src/api/endpoints/monitoring.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}