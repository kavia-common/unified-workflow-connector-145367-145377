{"is_source_file": true, "format": "Python", "description": "This file contains FastAPI endpoint implementations for handling webhooks, including receiving, listing, and reprocessing webhook events, along with internal helper functions for signature validation and event type determination.", "external_files": ["src.models.schemas", "src.core.database", "src.core.exceptions", "src.connectors.registry", "src.core.config", "loguru"], "external_methods": ["connector_registry.is_registered", "connector_registry.get_connector_class", "get_database", "StatusResponse", "WebhookEventCreate"], "published": ["receive_webhook", "list_webhook_events", "reprocess_webhook_event"], "classes": [], "methods": [{"name": "receive_webhook( connector_id: str, request: Request, payload: Dict[str, Any], x_hub_signature: Optional[str] = Header(None), x_github_event: Optional[str] = Header(None), x_slack_signature: Optional[str] = Header(None), user_agent: Optional[str] = Header(None), db = Depends(get_database) )", "description": "Endpoint to receive and process incoming webhook requests, validating signatures, storing events, and logging.", "scope": "", "scopeKind": ""}, {"name": "list_webhook_events( connector_id: Optional[str] = None, event_type: Optional[str] = None, processed: Optional[bool] = None, limit: int = 50, db = Depends(get_database) )", "description": "Endpoint to list stored webhook events with optional filtering and sorting.", "scope": "", "scopeKind": ""}, {"name": "reprocess_webhook_event( event_id: str, db = Depends(get_database) )", "description": "Endpoint to requeue a previously failed webhook event for reprocessing.", "scope": "", "scopeKind": ""}, {"name": "None _validate_webhook_signature( connector_id: str, payload: Dict[str, Any], github_signature: Optional[str], slack_signature: Optional[str], request: Request )", "description": "Internal function to validate webhook signatures for security, supporting GitHub and Slack.", "scope": "", "scopeKind": ""}, {"name": "str _determine_event_type( connector_id: str, payload: Dict[str, Any], github_event: Optional[str], headers: Dict[str, str] )", "description": "Internal function to determine webhook event type based on connector type and payload.", "scope": "", "scopeKind": ""}], "calls": ["connector_registry.is_registered", "connector_registry.get_connector_class", "db.webhook_events.insert_one", "logger.info", "logger.error", "db.webhook_events.find_one", "db.webhook_events.update_one"], "search-terms": ["webhook endpoint", "receive_webhook", "list_webhook_events", "reprocess_webhook_event", "signature validation", "connector registry", "webhook event storage", "FastAPI webhooks"], "state": 2, "file_id": 19, "knowledge_revision": 56, "git_revision": "", "revision_history": [{"48": ""}, {"56": ""}], "ctags": [{"_type": "tag", "name": "_determine_event_type", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/webhooks.py", "pattern": "/^def _determine_event_type($/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "( connector_id: str, payload: Dict[str, Any], github_event: Optional[str], headers: Dict[str, str] )"}, {"_type": "tag", "name": "_validate_webhook_signature", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/webhooks.py", "pattern": "/^async def _validate_webhook_signature($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( connector_id: str, payload: Dict[str, Any], github_signature: Optional[str], slack_signature: Optional[str], request: Request )"}, {"_type": "tag", "name": "list_webhook_events", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/webhooks.py", "pattern": "/^async def list_webhook_events($/", "language": "Python", "kind": "function", "signature": "( connector_id: Optional[str] = None, event_type: Optional[str] = None, processed: Optional[bool] = None, limit: int = 50, db = Depends(get_database) )"}, {"_type": "tag", "name": "receive_webhook", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/webhooks.py", "pattern": "/^async def receive_webhook($/", "language": "Python", "kind": "function", "signature": "( connector_id: str, request: Request, payload: Dict[str, Any], x_hub_signature: Optional[str] = Header(None), x_github_event: Optional[str] = Header(None), x_slack_signature: Optional[str] = Header(None), user_agent: Optional[str] = Header(None), db = Depends(get_database) )"}, {"_type": "tag", "name": "reprocess_webhook_event", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/webhooks.py", "pattern": "/^async def reprocess_webhook_event($/", "language": "Python", "kind": "function", "signature": "( event_id: str, db = Depends(get_database) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/api/endpoints/webhooks.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}], "hash": "28421d40518303817f10f1e73691a873", "format-version": 4, "code-base-name": "connector_backend", "filename": "connector_backend/src/api/endpoints/webhooks.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}