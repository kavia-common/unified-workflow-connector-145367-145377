{"is_source_file": true, "format": "Python", "description": "This source file defines the ConnectorRegistry class, which manages registration, retrieval, and listing of connector classes and instances in a plugin-like architecture. It handles dynamic importing of specific connector modules and maintains metadata for each connector.", "external_files": ["src.connectors.base", "src.models.schemas", "src.core.exceptions", "src.connectors.jira.connector", "src.connectors.confluence.connector", "src.connectors.slack.connector", "src.connectors.github.connector", "src.connectors.gitlab.connector", "src.connectors.servicenow.connector"], "external_methods": ["logger.warning", "logger.info", "logger.error"], "published": ["connector_registry"], "classes": [{"name": "ConnectorRegistry", "description": "A class for managing available connectors, including registration, retrieval, and listing of connector classes and metadata."}], "methods": [{"name": "__init__(self)", "description": "Constructor initializing internal dictionaries for connectors and metadata.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "None register(self, connector_class: Type[BaseConnector])", "description": "Registers a connector class and captures its metadata.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "Type[BaseConnector] get_connector_class(self, connector_id: str)", "description": "Retrieves a connector class by its identifier.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "BaseConnector create_connector(self, connector_id: str, config)", "description": "Instantiates a connector given its ID and configuration.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "List[Dict[str,any]] list_connectors(self)", "description": "Asynchronously lists all registered connectors with their metadata.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "bool is_registered(self, connector_id: str)", "description": "Checks whether a connector ID has been registered.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "Optional[ConnectorMetadata] get_connector_metadata(self, connector_id: str)", "description": "Retrieves metadata for a specific connector by ID.", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"name": "None initialize(self)", "description": "Discovers and registers built-in connectors during startup.", "scope": "ConnectorRegistry", "scopeKind": "class"}], "calls": ["logger.warning", "logger.info", "logger.error", "self.register", "self.get_connector_class"], "search-terms": ["ConnectorRegistry", "register", "initialize", "list_connectors", "get_connector_class", "src.connectors", "metadata", "dynamic import", "plugin management"], "state": 2, "file_id": 13, "knowledge_revision": 46, "git_revision": "", "revision_history": [{"29": ""}, {"46": ""}], "ctags": [{"_type": "tag", "name": "ConnectorRegistry", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^class ConnectorRegistry:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "connector_registry", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^connector_registry = ConnectorRegistry()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_connector", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    def create_connector(self, connector_id: str, config) -> BaseConnector:$/", "language": "Python", "typeref": "typename:BaseConnector", "kind": "member", "signature": "(self, connector_id: str, config)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "get_connector_class", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    def get_connector_class(self, connector_id: str) -> Type[BaseConnector]:$/", "language": "Python", "typeref": "typename:Type[BaseConnector]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "get_connector_metadata", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    def get_connector_metadata(self, connector_id: str) -> Optional[ConnectorMetadata]:$/", "language": "Python", "typeref": "typename:Optional[ConnectorMetadata]", "kind": "member", "signature": "(self, connector_id: str)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "initialize", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    async def initialize(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "is_registered", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    def is_registered(self, connector_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, connector_id: str)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    async def list_connectors(self) -> List[Dict[str, any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,any]]", "kind": "member", "signature": "(self)", "scope": "ConnectorRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/unified-workflow-connector-145367-145377/connector_backend/src/connectors/registry.py", "pattern": "/^    def register(self, connector_class: Type[BaseConnector]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, connector_class: Type[BaseConnector])", "scope": "ConnectorRegistry", "scopeKind": "class"}], "hash": "71d71f94f1eeb4f03fa28fdb203027da", "format-version": 4, "code-base-name": "connector_backend", "filename": "connector_backend/src/connectors/registry.py", "fields": [{"name": "connector_registry = ConnectorRegistry()", "scope": "", "scopeKind": "", "description": "unavailable"}]}